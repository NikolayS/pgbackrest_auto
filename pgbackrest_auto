#!/bin/bash
# Author: Vitaliy Kukharik (vitabaks@gmail.com)
# Title: /usr/bin/pgbackrest_auto - Automatic Restore PostgreSQL from backup

# Dependencies: OS Debian/Ubuntu, PostgreSQL >= 9.4, pgbackrest >= 2.01;
# for "--checkdb": amcheck_next extension/SQL version >=2 (https://github.com/petergeoghegan/amcheck)
# for "--report": sendemail, gawk, /usr/bin/ansi2html.sh (https://github.com/pixelb/scripts/blob/master/scripts/ansi2html.sh)
# Requirements: local trust for postgres (login by Unix domain socket) in the pg_hba.conf or ".pgpass"
# Run as user: postgres

ver="1.2"

# variables for function "sendmail()"
smtp_server="10.128.64.5:25"
mail_from="backuper@my-domain.ru"
mail_to="monitoring.dba@my-domain.ru"


function errmsg(){
    # Print error message
    # ARG: "error message"
    msg="$1"
    echo -e "$(date "+%F %T") \e[91mWARN:\e[0m $msg"
    return 1
}
function error(){
    # Print error message and exit
    # ARG: "error message"
    msg="$1"
    echo -e "$(date "+%F %T") \e[101mERROR:\e[0m $msg"
    if [[ "${REPORT}" = "yes" ]]; then sendmail; fi
    exit 1
}
function info(){
    # Print info message
    # ARG: "info message"
    msg="$1"
    echo -e "$(date "+%F %T") \e[32mINFO:\e[0m $msg"
}
function blinkmsg(){
    # Print blink info message
    # ARG: "info message"
    msg="$1"
    echo -e "$(date "+%F %T") \e[103mWARN:\e[0m \e[5m$msg"
}


while getopts ":-:" optchar; do
    [[ "${optchar}" == "-" ]] || continue
    case "${OPTARG}" in
        from=* )
            FROM=${OPTARG#*=}
            ;;
        to=* )
            TO=${OPTARG#*=}
            ;;
        datname=* )
            DATNAME=${OPTARG#*=}
            ;;
        backup-set=* )
            BACKUPSET=${OPTARG#*=}
            ;;
        recovery-type=* )
            RECOVERYTYPE=${OPTARG#*=}
            ;;
        recovery-target=* )
            RECOVERYTARGET=${OPTARG#*=}
            ;;
        backup-host=* )
            BACKUPHOST=${OPTARG#*=}
            ;;
        pgver=* )
            PGVER=${OPTARG#*=}
            ;;
        checkdb )
            CHECKDB=yes
            ;;
        clear )
            CLEAR=yes
            ;;
        report )
            REPORT=yes
            ;;
    esac
done


function help(){
echo -e "
$0

\e[92mAutomatic Restore PostgreSQL from backup\e[0m

Support three types of restore:
        1) Restore last backup  (recovery to earliest consistent point) [default]
        2) Restore latest       (recovery to the end of the archive stream)
        3) Restore to the point (recovery to restore point)

\e[33mImportant\e[0m: Run on the nodes on which you want to restore the backup

Usage: $0 \e[1m--from=\e[0mSTANZANAME \e[1m--to=\e[0mDATA_DIRECTORY [ \e[1m--datname=\e[0mDATABASE [...] ] [ \e[1m--recovery-type=\e[0m( default | immediate | time ) ] [ \e[1m--recovery-target=\e[0mTIMELINE  [ \e[1m--backup-set=\e[0mSET ] [ \e[1m--backup-host=\e[0mHOST ] [ \e[1m--pgver=\e[0m( 94 | 10 ) ] [ \e[1m--checkdb\e[0m ] [ \e[1m--clear\e[0m ] [ \e[1m--report\e[0m ] ]


\e[1m--from=\e[0mSTANZANAME
        Stanza from which you need to restore from a backup

\e[1m--to=\e[0mDATA_DIRECTORY
        PostgreSQL Data directory Path to restore from a backup
        Example: /var/lib/postgresql/11/rst

\e[1m--datname=\e[0mDATABASE [...]
        Database name to be restored (\e[4mAfter this you MUST drop other databases\e[0m)
        Note that built-in databases (template0, template1, and postgres) are always restored.
        To be restore more than one database specify them in brackets separated by spaces. 
        Example: --datname=\"db1 db2\"

\e[1m--recovery-type=\e[0mTYPE
        immediate - recover only until the database becomes consistent           (Type 1. Restore last backup)  [default]
        default   - recover to the end of the archive stream                     (Type 2. Restore latest)
        time      - recover to the time specified in --recovery-target           (Type 3. Restore to the point)

\e[1m--recovery-target=\e[0mTIMELINE
        time - recovery point time. The time stamp up to which recovery will proceed.
        Example: \"2018-08-08 12:46:54\"

\e[1m--backup-set=\e[0mSET
        If you need to restore not the most recent backup. Example few days ago.
        Get info of backup. Login to pgbackrest server. User postgres
        pgbackrest --stanza=[STANZA NAME] info
        And get it. Example:
                    incr backup: 20180807-212125F_20180808-050002I
        This is the name of SET: 20180807-212125F_20180808-050002I

\e[1m--backup-host=\e[0mHOST
        pgBacRest repository ip address (\e[4mUse SSH Key-Based Authentication\e[0m)
        localhost [default]

\e[1m--pgver=\e[0mVERSION
        PostgreSQL cluster (instance) version
        94 | 95 | 96 | 10 [default] | 11 | 12

\e[1m--checkdb\e[0m
        Validate for Physical and Logical Database Corruption (\e[4mIt work with only Full PostgreSQL Restore\e[0m)

\e[1m--clear\e[0m
        Clear PostgreSQL Data directory after Restore (the path was specified in the \"--to\" parameter ) [ optional ]

\e[1m--report\e[0m
        Send report to mail address (\e[4mSpecify smtp parameters in the $0 file\e[0m)



\e[33mEXAMPLES:\e[0m
( example stanza \"app-db\" , backup-host \"localhost\" )

| Restore last backup.

    # $0 --from=app-db --to=/var/lib/postgresql/11/rst

| Restore latest backup (recover to the end of the archive stream).

    # $0 --from=app-db --to=/var/lib/postgresql/11/rst --recovery-type=default

| Restore backup made a few days ago.

    # $0 --from=app-db --to=/var/lib/postgresql/11/rst --backup-set=20180807-212125F_20180808-050002I

| Restore backup made a few days ago and pick time.

    # $0 --from=app-db --to=/var/lib/postgresql/11/rst --backup-set=20180807-212125F_20180808-050002I --recovery-type=time --recovery-target=\"2018-08-08 12:46:54\"

| Restore backup made a few days ago and pick time. And we have restore only one database with the name \"app_db\".

    # $0 --from=app-db --to=/var/lib/postgresql/11/rst --datname=app_db --backup-set=20180807-212125F_20180808-050002I --recovery-type=time --recovery-target=\"2018-08-08 12:46:54\"

| Restore and Validate of databases (for example: pgBacRest repository 10.128.64.50, PostgreSQL version 11)

    # $0 --from=app-db --to=/var/lib/postgresql/11/rst --backup-host=10.128.64.50 --pgver=11 --checkdb
"
exit
}
[ "$1" = "-h" ] || [ "$1" = "--help" ] || [ "$1" = "help" ] && help
if [ "$1" = "-v" ] || [ "$1" = "--version" ] || [ "$1" = "version" ]; then echo "$0 version ${ver}" && exit; fi

USR=$(whoami)
if [ "$USR" != 'postgres' ]; then
    error "$0 \e[91mmust be run as postgres\e[0m"
fi

sleep=1
limit=3600
# Log
log="/var/log/pgbackrest/pgbackrest_auto-restore_${FROM}.log"
# Global lock
lock="/tmp/pgbackrest_auto_${FROM}.lock"
exec 9>"${lock}"
flock -n 9 || exit

[[ -z "${FROM}" ]] && error "--from is missing"
[[ -z "${TO}" ]] && error "--to is missing"
[[ -z $RECOVERYTYPE && -n $RECOVERYTARGET ]] && error "--recovery-type is missing"
if [[ $RECOVERYTYPE != default ]]; then
    [[ -n $RECOVERYTYPE && -z $RECOVERYTARGET ]] && error "--recovery-target is missing"
fi
# recovery-type - default
if [[ -z $RECOVERYTYPE ]]; then RECOVERYTYPE="immediate"; fi

[[ $RECOVERYTYPE = immediate || $RECOVERYTYPE = default || $RECOVERYTYPE = time ]] || error "--recovery-type=( immediate | default | time )"
[[ $RECOVERYTYPE = default && -n $RECOVERYTARGET ]] && error "Not use --recovery-type=default with --recovery-target"
if [[ -n $DATNAME && -n $CHECKDB ]]; then
error "Not use --checkdb with --datname. It work with only Full PostgreSQL Restore"
fi

# PostgreSQL
#pg_instance="main"
pg_instance=$(bash -c "echo ${TO} | sed -e 's|.*/||g'")
if [[ -z $PGVER ]]; then
    PGVER=10 # default
    version=${PGVER}
    bin_dir="/usr/lib/postgresql/${version}/bin"
    conf_dir="/etc/postgresql/${version}/${pg_instance}"
    recovery_opt="recovery_target_action=promote"
elif [[ $PGVER = 94 ]]; then
    version=9.4
    bin_dir="/usr/lib/postgresql/${version}/bin"
    conf_dir="/etc/postgresql/${version}/${pg_instance}"
    recovery_opt="pause_at_recovery_target=false"
elif [[ $PGVER = 95 ]]; then
    version=9.5
    bin_dir="/usr/lib/postgresql/${version}/bin"
    conf_dir="/etc/postgresql/${version}/${pg_instance}"
    recovery_opt="recovery_target_action=promote"
elif [[ $PGVER = 96 ]]; then
    version=9.6
    bin_dir="/usr/lib/postgresql/${version}/bin"
    conf_dir="/etc/postgresql/${version}/${pg_instance}"
    recovery_opt="recovery_target_action=promote"
elif [[ $PGVER -ge 10 || $PGVER -lt 90 ]]; then
    version=${PGVER}
    bin_dir="/usr/lib/postgresql/${version}/bin"
    conf_dir="/etc/postgresql/${version}/${pg_instance}"
    recovery_opt="recovery_target_action=promote"
else
    error "--pgver must be = ( 94 | 95 | 96 | 10 | 11 ... )"
fi

# checkdb
if [[ -z $CHECKDB ]]; then CHECKDB="No"; fi

# check data dir
if [[ ! -d "${TO}" ]]; then
    error "${TO} \e[91mdata directory is not exists\e[0m"
elif [[ ! -w "${TO}" ]]; then
    error "${TO} \e[91write permission is not granted for postgres user\e[0m"
fi
# check conf dir
if [[ ! -d "${conf_dir}" ]]; then
    error "${conf_dir} \e[91mconf directory is not exists\e[0m"
fi

# Variables for function "pgbackrest_exec()"
if [[ -z $BACKUPHOST ]]; then BACKUPHOST="localhost"; fi
backup_conf=/tmp/pgbackrest_auto.conf
if [ ! -f $backup_conf ]; then touch $backup_conf; fi

# restore_type_msg
if [[ -z $DATNAME && $RECOVERYTYPE = time ]]; then
    restore_type_msg="Full PostgreSQL Restore with Point-in-Time"
elif [[ -z $DATNAME ]]; then
    restore_type_msg="Full PostgreSQL Restore"
elif [[ -n $DATNAME && $RECOVERYTYPE = time ]]; then
    restore_type_msg="Partial PostgreSQL Restore with Point-in-Time"
elif [[ -n $DATNAME ]]; then
    restore_type_msg="Partial PostgreSQL Restore"
fi


function sigterm_handler(){
    info "Recieved QUIT|TERM|INT signal"
    error "Clean up and exit"
}

trap sigterm_handler QUIT TERM INT

function check_errcode(){
    # ARG: "error message"
    [[ $? -ne 0 ]] && error "${1}"
}

function check_mistake_run(){
    if [[ -n "${TO}" ]]; then
        blinkmsg "Restoring to \e[1m\e[91m${TO}\e[0m Waiting 30 seconds. The \e[91mdirectory will be overwritten\e[0m. If mistake, press ^C"
        sleep 30s
    fi
}

function pg_port_pick(){
    if [[ -f ${conf_dir}/postgresql.conf ]]; then
        port=$(sed -n 's/port.*=.*\([0-9]\{4\}\).*/\1/p' "${conf_dir}"/postgresql.conf | tail -1)
    else
        error "\e[91mport not found or missing ${conf_dir}/postgresql.conf file\e[0m"
    fi
}

function cycle_simple(){
    # ARG: command
    # Assign variable 'status' = "ok" or "er"
    status=
    cmd=$1
    attempt=1
    while [[ $attempt -le $limit ]]; do
        info "\e[90mattempt: ${attempt}/${limit}\e[0m"
        $cmd
        if [[ "$status" = "ok" ]]; then
            # Ready to work
            break
        elif [[ "$status" = "er" ]]; then
            error "exit"
        fi
        ((attempt++))
    done

    [[ $attempt -ge $limit && $status != ok ]] && error "attempt limit exceeded"
}

function pg_stop_check(){
    # Use with function cycle_simple
    info "PostgreSQL check status"
    /usr/bin/pg_ctlcluster ${version} "${pg_instance}" status &> /dev/null
    code=$?
    if [[ $code -eq 3 ]]; then
        info "PostgreSQL instance ${pg_instance} not running"
        status=ok
    elif [[ $code -eq 0 ]]; then
        info "\e[90mWait PostgreSQL instance ${pg_instance} stop: wait ${sleep}s\e[0m"
        sleep ${sleep}s
    elif [[ $code -eq 4 ]]; then
        info "${TO} is not a database cluster directory. May be its clean."
        status=ok
    else
        errmsg "\e[91mPostgreSQL check failed\e[0m"
        status=er
    fi
}

function pg_stop(){
    /usr/bin/pg_ctlcluster ${version} "${pg_instance}" status &> /dev/null
    code=$?
    if [[ $code -eq 0 ]]; then
        info "PostgreSQL stop"
        /usr/bin/pg_ctlcluster ${version} "${pg_instance}" stop -m fast &> /dev/null
        if [[ $? -eq 0 ]]; then
            info "PostgreSQL instance ${pg_instance} stopped"
        else
            errmsg "\e[91mPostgreSQL instance ${pg_instance} stop failed\e[0m"
        fi
    fi
}

function pg_isready(){
    ${bin_dir}/pg_isready -qp "${port}"
    if [[ $? -eq 0 ]]; then
        info "PostgreSQL instance ${pg_instance} started and accepting connections"
        status=ok
    else
        errmsg "PostgreSQL instance ${pg_instance} no response"
        sleep 3
    fi
}
function pg_start(){
    info "PostgreSQL start"
    /usr/bin/pg_ctlcluster ${version} "${pg_instance}" start &> /dev/null
    if [[ $? -ne 0 ]]; then
        error "\e[91mPostgreSQL instance ${pg_instance} start failed\e[0m"
    else
        pg_isready 1> /dev/null
    fi
}

function pgbackrest_exec(){
    [[ -n "${BACKUPSET}" ]] && pgbackrest_opt="--set=${BACKUPSET}"
    [[ -n "${DATNAME}" ]] && for db in ${DATNAME}; do pgbackrest_opt+=" --db-include=${db}"; done
    if [[ "${RECOVERYTYPE}" = "default" || "${RECOVERYTYPE}" = "time" ]]; then
        [[ -n "${RECOVERYTYPE}" ]] && pgbackrest_opt+=" --type=${RECOVERYTYPE}"
        [[ -n "${RECOVERYTARGET}" ]] && pgbackrest_opt+=" --target=\"${RECOVERYTARGET}\""
        else
    pgbackrest_opt+=" --type=immediate"
    fi
    # -- repo1-path
    if [[ -f /etc/pgbackrest.conf ]]; then grep -q "repo1-path" /etc/pgbackrest.conf && pgbackrest_opt+=" --$(bash -c "grep \"repo1-path=\" /etc/pgbackrest.conf")"; fi
    # --
        info "Restore from backup started. Type: $restore_type_msg"
        detail_rst_log="/var/log/pgbackrest/$FROM-restore.log"
        if [ -f "${detail_rst_log}" ]; then info "\e[90mSee detailed log in the file ${detail_rst_log}\e[0m"; fi
    # execute pgbackrest
    bash -c "pgbackrest --config=${backup_conf} --repo1-host=${BACKUPHOST} --repo1-host-user=postgres --stanza=${FROM} --pg1-path=${TO} ${pgbackrest_opt} --delta restore --process-max=4 --log-level-console=error --log-level-file=detail --recovery-option=${recovery_opt}"
        if [[ $? -eq 0 ]]; then
            info "Restore from backup done"
        else
            error "\e[91mRestore from backup failed\e[0m"
        fi
}

function pg_info_replay(){
    if [[ "${RECOVERYTYPE}" = "time" ]]; then
        result=$(bash -c "${bin_dir}/psql -p ${port} -tAc \"SELECT pg_last_xact_replay_timestamp(), '${RECOVERYTARGET}' - pg_last_xact_replay_timestamp()\"")
    else
        result=$(bash -c "${bin_dir}/psql -p ${port} -tAc \"SELECT pg_last_xact_replay_timestamp()\"")
    fi
    while IFS='|' read -r replay_timestamp left_timestamp; do
        if [[ -n "${left_timestamp}" ]]; then
            info "\e[1mReplayed:\e[0m ${replay_timestamp} \e[1mLeft:\e[0m ${left_timestamp}"
        else
            info "\e[1mReplayed:\e[0m ${replay_timestamp}"
        fi
    done <<< "${result}"
}

function pg_check_recovery(){
    state=$(${bin_dir}/psql -p "${port}" -tAc 'SELECT pg_is_in_recovery()') 2>/dev/null
    pg_info_replay
    # Is the restore complete? YES
    if [ "$state" = "f" ]; then
        recovery=ok
    # Is the restore complete? No
    elif [ "$state" = "t" ]; then
        sleep 10
    else
    # Is everything all right? check connection with PostgreSQL
        pg_isready 1> /dev/null; check_errcode "exit"
    fi
}

function pg_data_validation(){
    databases=$(bash -c "${bin_dir}/psql -p ${port} -tAc \"select datname from pg_database where not datistemplate\"")
        for db in $databases; do
            info "\e[90mStart data validation for database $db\e[0m"
            if pg_isready 1> /dev/null; then
                ${bin_dir}/pg_dump -p "${port}" -d "$db" >> /dev/null
                if [[ $? -ne 0 ]]; then
                errmsg "Data validation in the database \e[1m$db\e[0m - \e[91mFailed\e[0m"
                else
                    info "Data validation in the database \e[1m$db\e[0m - \e[92mSuccessful\e[0m"
                    ok_dbArray+=("$db")
                fi
            else
                errmsg "PostgreSQL instance ${pg_instance} no response"
            fi
        done
}

# amcheck CREATE EXTENSION if not exists
function amcheck_exists(){
    if [[ "$PGVER" -ge "11" && "$PGVER" -lt "90" ]]; then
        ${bin_dir}/psql -p "${port}" -U postgres -d "$db_name" -tAc "CREATE EXTENSION if not exists amcheck" 1> /dev/null
    else
        ${bin_dir}/psql -p "${port}" -U postgres -d "$db_name" -tAc "CREATE EXTENSION if not exists amcheck_next" 1> /dev/null
    fi
}
# amcheck - verify the logical consistency of the structure of PostgreSQL B-Tree indexes
function pg_logical_validation(){
    for db_name in "${ok_dbArray[@]}"; do
        if pg_isready 1> /dev/null; then
            if amcheck_exists; then
                info "Verify the logical consistency of the structure of indexes and heap relations in the database \e[1m$db_name\e[0m"
                indexes=$(${bin_dir}/psql -p "${port}" -d "$db_name" -tAc "SELECT quote_ident(n.nspname)||'.'||quote_ident(c.relname) FROM pg_index i JOIN pg_opclass op ON i.indclass[0] = op.oid JOIN pg_am am ON op.opcmethod = am.oid JOIN pg_class c ON i.indexrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE am.amname = 'btree' AND n.nspname NOT IN ('pg_catalog', 'pg_toast') AND c.relpersistence != 't' AND c.relkind = 'i' AND i.indisready AND i.indisvalid")
                for index in $indexes; do
                    # info "\e[90mVerify the logical consistency of the structure of index\e[0m ${index}"
                    ${bin_dir}/psql -p "${port}" -d "$db_name" -tAc "SELECT bt_index_parent_check('${index}', true)" 1> /dev/null
                        if [[ $? -ne 0 ]]; then
                            errmsg "Logical validation for index \e[1m${index}\e[0m ( database \e[1m$db_name\e[0m ) - \e[91mFailed\e[0m"
                        fi
                done
            fi
        fi
    done
}

# Send report to mail address
function sendmail(){
    SMTP="${smtp_server}"
    EMAIL="${mail_to}"
    SUBJECT="postgres restore report for '${FROM}' production: `date +\%Y-\%m-\%d` (auto-generated)"
    MAIL_FROM="${mail_from}"

    # convert log to html
    if [ ! -f "${log}".html ]; then touch "${log}".html; fi
    cat "${log}" | ansi2html.sh --bg=dark > "${log}".html

    # send mail
    sendemail -v -o message-content-type=html -o message-file="${log}".html -f "${MAIL_FROM}" -t "${EMAIL}" -u "${SUBJECT}" -s "${SMTP}" -a "${log}".html
}


### MAIN ###
STEP=1
rm -f "${log}"
exec &> >(tee -a "${log}")
pg_port_pick
info "\e[32m[STEP $((STEP++))]: Starting\e[0m"
info "Starting. \e[1mRestore Type:\e[0m \e[37m${restore_type_msg}\e[0m \e[1m\e[4mFROM\e[24m Stanza:\e[0m \e[36m${FROM}\e[0m ---> \e[1m\e[4mTO\e[24m Directory:\e[0m \e[36m${TO}\e[0m"
info "Starting. \e[1mRestore Settings:\e[0m \e[37m${RECOVERYTYPE} ${RECOVERYTARGET} ${BACKUPSET} ${DATNAME}\e[0m"
info "Starting. \e[1mRun settings:\e[0m Backup host: \e[37m${BACKUPHOST}\e[0m"
info "Starting. \e[1mRun settings:\e[0m Log: \e[37m${log}\e[0m"
info "Starting. \e[1mRun settings:\e[0m Lock run: \e[37m${lock}\e[0m"
info "Starting. \e[1mPostgreSQL instance:\e[0m \e[37m${pg_instance}\e[0m"
info "Starting. \e[1mPostgreSQL version:\e[0m \e[37m${version}\e[0m"
info "Starting. \e[1mPostgreSQL port:\e[0m \e[37m${port}\e[0m"
info "Starting. \e[1mPostgreSQL Database Validation:\e[0m \e[37m${CHECKDB}\e[0m"
if [[ "${CLEAR}" = "yes" ]]; then info "Starting. \e[1mClear Data Directory after restore:\e[0m \e[37m${CLEAR}\e[0m";fi
check_mistake_run
info "\e[32m[STEP $((STEP++))]: Stopping PostgreSQL\e[0m"
pg_stop
cycle_simple pg_stop_check
info "\e[32m[STEP $((STEP++))]: Restoring from backup\e[0m"
# Restore from backup
pgbackrest_exec
info "\e[32m[STEP $((STEP++))]: PostgreSQL Starting for recovery\e[0m"
pg_start
cycle_simple pg_isready
info "\e[32m[STEP $((STEP++))]: PostgreSQL Recovery Checking\e[0m"
# Expect recovery result
while true; do
    info "\e[90mChecking if restoring from archive is done\e[0m"
    pg_check_recovery
    if [[ "${recovery}" = "ok" ]]; then
        info "Restoring from archive is done"
        info "\e[42mRestore done\e[0m"
        break
    elif [[ "${recovery}" = "er" ]]; then
        errmsg "\e[91m[STEP [ER]: PostgreSQL Recovery Failed\e[0m"
        errmsg "Restoring from archive failed"
        pg_stop; check_errcode "exit"
    else
        continue
    fi
done
if [[ "${CHECKDB}" = "yes" && "${recovery}" = "ok" ]]; then
info "\e[32m[STEP $((STEP++))]: Validate for physical database corruption\e[0m"
pg_data_validation
info "\e[32m[STEP $((STEP++))]: Validate for logical database corruption (with amcheck)\e[0m"
pg_logical_validation
fi
# [ optional ]
if [[ "${CLEAR}" = "yes" ]]; then
    info "\e[32m[STEP $((STEP++))]: Stopping PostgreSQL and Clear Data Directory\e[0m"
    pg_stop
    cycle_simple pg_stop_check
        if [[ $code -eq 3 ]]; then
            find "${TO}" -mindepth 1 -delete
                if [ ! "$(ls -A "${TO}")" ]; then
                    info "Directory ${TO} is cleared"
                fi
        fi
fi
if [[ "${REPORT}" = "yes" ]]; then
    info "\e[32m[STEP $((STEP++))]: Send report to mail address\e[0m"
    sendmail
    # remove html log
    rm "${log}".html
fi
info "\e[104mFinish\e[0m"
    # remove lock file
    if [ -f "${lock}" ]; then 
    rm "${lock}"
    fi

exit
